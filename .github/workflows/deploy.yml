name: 部署智能表情包推荐系统

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

env:
  PYTHON_VERSION: '3.9'
  PROJECT_NAME: 'emoji-recommender'

jobs:
  deploy:
    name: 部署到服务器
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 打包项目文件
      run: |
        # 创建部署包，只包含必要文件
        tar -czf deploy.tar.gz \
          --exclude='.git*' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='venv' \
          --exclude='logs' \
          --exclude='*.faiss' \
          --exclude='*.pkl' \
          --exclude='oss_emoji_metadata.json' \
          *.py requirements.txt *.md config_example.py env.template || true
    
    - name: 上传代码到服务器
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT || 22 }}
        source: "deploy.tar.gz"
        target: "/tmp/"
    
    - name: 部署到Ubuntu服务器
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT || 22 }}
        timeout: 300s  # 增加超时时间到5分钟
        script: |
          set -e
          
          echo "🚀 开始快速部署智能表情包推荐系统..."
          
          # 设置变量
          PROJECT_DIR="/opt/${{ env.PROJECT_NAME }}"
          SERVICE_NAME="${{ env.PROJECT_NAME }}"
          
          # 快速检查系统依赖（跳过不必要的检查）
          if ! command -v python3 &> /dev/null || ! python3 -m venv --help &> /dev/null; then
              echo "📦 安装Python依赖..."
              export DEBIAN_FRONTEND=noninteractive
              
              # 配置阿里云软件源镜像
              echo "🔧 配置软件源镜像..."
              sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak 2>/dev/null || true
              
              # 更新软件包列表
              sudo apt update -qq > /dev/null 2>&1 || {
                  echo "⚠️  官方源可能有问题，尝试使用阿里云镜像源..."
                  # 如果官方源有问题，尝试使用阿里云镜像
                  echo "deb https://mirrors.aliyun.com/ubuntu/ $(lsb_release -cs) main restricted universe multiverse" | sudo tee /etc/apt/sources.list > /dev/null
                  echo "deb https://mirrors.aliyun.com/ubuntu/ $(lsb_release -cs)-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list > /dev/null
                  echo "deb https://mirrors.aliyun.com/ubuntu/ $(lsb_release -cs)-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list > /dev/null
                  sudo apt update -qq > /dev/null 2>&1
              }
              
              sudo apt install -y -qq python3 python3-pip python3-venv python3-dev build-essential > /dev/null 2>&1
          else
              echo "✅ Python环境已就绪"
          fi
          
          # 停止现有服务
          if systemctl is-active --quiet $SERVICE_NAME 2>/dev/null; then
              echo "⏹️ 停止现有服务..."
              sudo systemctl stop $SERVICE_NAME
          fi
          
          # 快速备份（仅保留环境文件）
          if [ -f "$PROJECT_DIR/.env" ]; then
              echo "📂 备份环境配置..."
              cp "$PROJECT_DIR/.env" "/tmp/.env.backup"
          fi
          
          # 部署新代码
          echo "📥 部署新代码..."
          sudo rm -rf "$PROJECT_DIR"
          sudo mkdir -p "$PROJECT_DIR"
          sudo chown $USER:$USER "$PROJECT_DIR"
          cd "$PROJECT_DIR"
          tar -xzf /tmp/deploy.tar.gz
          sudo chown -R $USER:$USER "$PROJECT_DIR"
          rm -f /tmp/deploy.tar.gz
          
          # 恢复环境配置
          if [ -f "/tmp/.env.backup" ]; then
              cp "/tmp/.env.backup" ".env"
              rm "/tmp/.env.backup"
              echo "✅ 恢复已备份的环境配置"
          elif [ ! -f ".env" ]; then
              if [ -f "env.template" ]; then
                  cp "env.template" ".env"
                  echo "📝 创建初始环境配置文件（使用模板）"
              else
                  echo "📝 创建初始环境配置文件"
                  echo "# 智能表情包推荐系统环境变量配置" > .env
                  echo "# OSS认证配置（如果不使用ECS RAM Role）" >> .env
                  echo "OSS_ACCESS_KEY_ID=your-access-key-id" >> .env
                  echo "OSS_ACCESS_KEY_SECRET=your-access-key-secret" >> .env
                  echo "OSS_USE_ECS_RAM_ROLE=false" >> .env
                  echo "# API认证配置" >> .env
                  echo "API_USERNAME=emoji_user" >> .env
                  echo "API_PASSWORD=emoji_pass_2025" >> .env
              fi
          fi
          
          # 环境准备
          echo "🌐 准备环境..."
          
          # 确保在正确的目录
          cd "$PROJECT_DIR"
          pwd
          
          # 显示当前用户和环境信息
          echo "当前用户: $(whoami)"
          echo "当前目录: $(pwd)"
          echo "Python版本: $(python3 --version)"
          
          # 完全模拟手动操作的虚拟环境设置
          echo "🐍 设置虚拟环境（模拟手动操作）..."
          
          # 检查并清理现有虚拟环境
          if [ -d "path/to/venv" ]; then
              echo "🗑️  清理现有虚拟环境..."
              rm -rf path/to/venv
          fi
          
          # 完全按照手动操作创建虚拟环境
          echo "🆕 执行: python3 -m venv path/to/venv"
          python3 -m venv path/to/venv
          
          # 检查虚拟环境是否创建成功
          if [ ! -f "path/to/venv/bin/activate" ]; then
              echo "❌ 虚拟环境创建失败"
              exit 1
          fi
          
          # 完全按照手动操作激活虚拟环境
          echo "🔄 执行: source path/to/venv/bin/activate"
          source path/to/venv/bin/activate
          
          # 验证虚拟环境激活状态
          echo "🔍 验证虚拟环境状态..."
          echo "VIRTUAL_ENV: $VIRTUAL_ENV"
          echo "Python路径: $(which python3)"
          echo "Pip路径: $(which pip)"
          
          # 完全模拟手动操作的包安装
          echo "📚 安装依赖（模拟手动操作）..."
          
          # 显示详细的环境信息用于调试
          echo "🔍 详细环境诊断："
          echo "SHELL: $SHELL"
          echo "PATH: $PATH"
          echo "HOME: $HOME"
          echo "USER: $USER"
          python3 -m pip --version
          python3 -m pip config list 2>/dev/null || echo "无pip配置文件"
          
          # 测试网络连接（不修改DNS）
          echo "🌐 测试网络连接..."
          ping -c 1 pypi.org > /dev/null 2>&1 && echo "✅ pypi.org 可达" || echo "❌ pypi.org 不可达"
          ping -c 1 mirrors.aliyun.com > /dev/null 2>&1 && echo "✅ mirrors.aliyun.com 可达" || echo "❌ mirrors.aliyun.com 不可达"
          
          # 显示requirements.txt内容
          echo "📋 requirements.txt 内容："
          cat requirements.txt
          
          # 完全按照手动操作安装依赖
          echo "📦 执行: python3 -m pip install -r requirements.txt"
          echo "开始时间: $(date)"
          python3 -m pip install -r requirements.txt
          INSTALL_RESULT=$?
          echo "结束时间: $(date)"
          echo "安装结果: $INSTALL_RESULT"
          
          # 安装Gunicorn
          echo "🦄 安装Gunicorn..."
          python3 -m pip install gunicorn
          
          # 创建日志目录
          mkdir -p logs
          
          # 验证依赖安装
          echo "🔍 验证关键依赖..."
          python3 -c "import fastapi; print('✅ FastAPI安装成功')" || echo "❌ FastAPI安装失败"
          python3 -c "import oss2; print('✅ OSS2安装成功')" || echo "❌ OSS2安装失败"
          python3 -c "import uvicorn; print('✅ Uvicorn安装成功')" || echo "❌ Uvicorn安装失败"
          
          # 创建systemd服务（仅在不存在时）
          if [ ! -f "/etc/systemd/system/$SERVICE_NAME.service" ]; then
              echo "🔧 创建systemd服务..."
              sudo tee /etc/systemd/system/$SERVICE_NAME.service > /dev/null <<EOF
          [Unit]
          Description=Intelligent Emoji Recommendation System
          After=network.target
          
          [Service]
          Type=simple
          User=$USER
          Group=$USER
          WorkingDirectory=$PROJECT_DIR
          Environment=PATH=$PROJECT_DIR/path/to/venv/bin
          ExecStart=$PROJECT_DIR/path/to/venv/bin/gunicorn -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 oss_api_server:app
          ExecReload=/bin/kill -s HUP \$MAINPID
          Restart=always
          RestartSec=3
          
          [Install]
          WantedBy=multi-user.target
          EOF
              sudo systemctl daemon-reload
              sudo systemctl enable $SERVICE_NAME
          fi
          
          # 启动服务
          echo "🔄 启动服务..."
          sudo systemctl start $SERVICE_NAME
          
          # 快速健康检查
          echo "🏥 健康检查..."
          sleep 5
          for i in {1..5}; do
              if curl -s http://localhost:8000/health > /dev/null 2>&1; then
                  echo "✅ 服务启动成功"
                  
                  # 额外检查API是否正常
                  if curl -s http://localhost:8000/ > /dev/null 2>&1; then
                      echo "✅ API服务正常响应"
                  else
                      echo "⚠️  API服务可能需要配置"
                  fi
                  break
              elif [ $i -eq 5 ]; then
                  echo "❌ 健康检查失败，查看日志："
                  sudo journalctl -u $SERVICE_NAME --no-pager -l -n 10
                  echo ""
                  echo "🔍 可能的问题："
                  echo "   1. OSS配置未正确设置 - 请检查config.py中的OSS配置"
                  echo "   2. Python依赖安装失败 - 检查网络连接和镜像源"
                  echo "   3. 端口8000被占用 - 运行: sudo netstat -tlnp | grep :8000"
                  echo "   4. 防火墙阻止访问 - 运行: sudo ufw status"
                  echo "   5. 内存不足 - 运行: free -h"
                  exit 1
              else
                  echo "⏳ 等待服务启动... ($i/5)"
                  sleep 3
              fi
          done
          
          # 获取服务器IP
          SERVER_IP=$(curl -s -4 --max-time 5 ifconfig.me 2>/dev/null || hostname -I | awk '{print $1}')
          
          echo ""
          echo "🎉 部署完成！"
          echo "📍 服务地址: http://$SERVER_IP:8000"
          echo "📚 API文档: http://$SERVER_IP:8000/docs"
          echo "🏥 健康检查: http://$SERVER_IP:8000/health"
          echo ""
          echo "🔗 API端点示例:"
          echo "   表情包推荐: curl -X POST http://$SERVER_IP:8000/recommend -H 'Content-Type: application/json' -d '{\"input\":\"开心\"}'"
          echo "   服务状态: curl http://$SERVER_IP:8000/status"
          echo "   配置信息: curl http://$SERVER_IP:8000/config"
          echo ""
          echo "📋 管理命令:"
          echo "   状态: sudo systemctl status $SERVICE_NAME"
          echo "   日志: sudo journalctl -u $SERVICE_NAME -f"
          echo "   重启: sudo systemctl restart $SERVICE_NAME"
          echo ""
          echo "⚠️ 重要提醒:"
          echo "   1. 请编辑 $PROJECT_DIR/config.py 文件配置OSS参数"
          echo "   2. 配置完成后运行: sudo systemctl restart $SERVICE_NAME"
          echo "   3. 建议配置Nginx反向代理用于生产环境"
          echo "   4. 确保OSS Bucket中已上传表情包文件"
          echo "   5. 访问 http://$SERVER_IP:8000/docs 查看API文档"