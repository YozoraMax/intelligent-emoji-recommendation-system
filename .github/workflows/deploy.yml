name: 部署到Ubuntu服务器

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

env:
  PYTHON_VERSION: '3.11'
  PROJECT_NAME: 'channel-integration'

jobs:
  deploy:
    name: 部署到服务器
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 打包项目文件
      run: |
        # 创建部署包，只包含必要文件
        tar -czf deploy.tar.gz \
          --exclude='.git*' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='node_modules' \
          --exclude='venv' \
          --exclude='path/to/venv' \
          src/ requirements.txt env.example *.py *.md *.yml docker-compose.yml Dockerfile || true
    
    - name: 上传代码到服务器
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT || 22 }}
        source: "deploy.tar.gz"
        target: "/tmp/"
    
    - name: 部署到Ubuntu服务器
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT || 22 }}
        timeout: 300s  # 增加超时时间到5分钟
        script: |
          set -e
          
          echo "🚀 开始快速部署渠道接入服务..."
          
          # 设置变量
          PROJECT_DIR="/opt/${{ env.PROJECT_NAME }}"
          SERVICE_NAME="${{ env.PROJECT_NAME }}"
          
          # 快速检查系统依赖（跳过不必要的检查）
          if ! command -v python3 &> /dev/null || ! python3 -m venv --help &> /dev/null; then
              echo "📦 安装Python依赖..."
              export DEBIAN_FRONTEND=noninteractive
              sudo apt update -qq > /dev/null 2>&1
              sudo apt install -y -qq python3 python3-pip python3-venv python3-dev > /dev/null 2>&1
          else
              echo "✅ Python环境已就绪"
          fi
          
          # 停止现有服务
          if systemctl is-active --quiet $SERVICE_NAME 2>/dev/null; then
              echo "⏹️ 停止现有服务..."
              sudo systemctl stop $SERVICE_NAME
          fi
          
          # 快速备份（仅保留环境文件）
          if [ -f "$PROJECT_DIR/.env" ]; then
              echo "📂 备份环境配置..."
              cp "$PROJECT_DIR/.env" "/tmp/.env.backup"
          fi
          
          # 部署新代码
          echo "📥 部署新代码..."
          sudo rm -rf "$PROJECT_DIR"
          sudo mkdir -p "$PROJECT_DIR"
          sudo chown $USER:$USER "$PROJECT_DIR"
          cd "$PROJECT_DIR"
          tar -xzf /tmp/deploy.tar.gz
          sudo chown -R $USER:$USER "$PROJECT_DIR"
          rm -f /tmp/deploy.tar.gz
          
          # 恢复环境配置
          if [ -f "/tmp/.env.backup" ]; then
              cp "/tmp/.env.backup" ".env"
              rm "/tmp/.env.backup"
          elif [ ! -f ".env" ]; then
              cp env.example .env
          fi
          
          # 智能虚拟环境处理
          echo "🐍 设置虚拟环境..."
          if [ ! -d "venv" ]; then
              python3 -m venv venv
          fi
          source venv/bin/activate
          
          # 优化的依赖安装
          echo "📚 安装依赖（优化模式）..."
          # 使用pip缓存和并行安装加速
          pip install --upgrade pip --quiet
          pip install --no-cache-dir -r requirements.txt --quiet
          pip install gunicorn --quiet
          
          # 创建日志目录
          mkdir -p logs
          
          # 创建systemd服务（仅在不存在时）
          if [ ! -f "/etc/systemd/system/$SERVICE_NAME.service" ]; then
              echo "🔧 创建systemd服务..."
              sudo tee /etc/systemd/system/$SERVICE_NAME.service > /dev/null <<EOF
          [Unit]
          Description=Channel Integration Service
          After=network.target
          
          [Service]
          Type=simple
          User=$USER
          Group=$USER
          WorkingDirectory=$PROJECT_DIR
          Environment=PATH=$PROJECT_DIR/venv/bin
          ExecStart=$PROJECT_DIR/venv/bin/gunicorn -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 src.main:app
          ExecReload=/bin/kill -s HUP \$MAINPID
          Restart=always
          RestartSec=3
          
          [Install]
          WantedBy=multi-user.target
          EOF
              sudo systemctl daemon-reload
              sudo systemctl enable $SERVICE_NAME
          fi
          
          # 启动服务
          echo "🔄 启动服务..."
          sudo systemctl start $SERVICE_NAME
          
          # 快速健康检查
          echo "🏥 健康检查..."
          sleep 3
          for i in {1..3}; do
              if curl -s http://localhost:8000/health > /dev/null 2>&1; then
                  echo "✅ 服务启动成功"
                  break
              elif [ $i -eq 3 ]; then
                  echo "❌ 健康检查失败，查看日志："
                  sudo journalctl -u $SERVICE_NAME --no-pager -l -n 5
                  exit 1
              else
                  echo "⏳ 等待服务启动... ($i/3)"
                  sleep 2
              fi
          done
          
          # 获取服务器IP
          SERVER_IP=$(curl -s -4 --max-time 5 ifconfig.me 2>/dev/null || hostname -I | awk '{print $1}')
          
          echo ""
          echo "🎉 部署完成！"
          echo "📍 服务地址: http://$SERVER_IP:8000"
          echo "📚 API文档: http://$SERVER_IP:8000/docs"
          echo "🏥 健康检查: http://$SERVER_IP:8000/health"
          echo ""
          echo "🔗 Webhook URLs示例:"
          echo "   获取租户webhook信息: curl http://$SERVER_IP:8000/webhook/info/{tenant_id}"
          echo "   Line Webhook: http://$SERVER_IP:8000/webhook/line/{tenant_id}"
          echo "   Telegram Webhook: http://$SERVER_IP:8000/webhook/telegram/{tenant_id}"
          echo ""
          echo "📋 管理命令:"
          echo "   状态: sudo systemctl status $SERVICE_NAME"
          echo "   日志: sudo journalctl -u $SERVICE_NAME -f"
          echo "   重启: sudo systemctl restart $SERVICE_NAME"
          echo ""
          echo "⚠️ 重要提醒:"
          echo "   1. 请编辑 $PROJECT_DIR/.env 文件配置环境变量"
          echo "   2. 配置完成后运行: sudo systemctl restart $SERVICE_NAME"
          echo "   3. 建议配置Nginx反向代理用于生产环境"